package com.gw.android.my_components.gps;

import com.gw.android.database.DaoSession;
import com.gw.android.my_components.gps.Coordinates;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COORDINATES.
*/
public class CoordinatesDao extends AbstractDao<Coordinates, Long> {

    public static final String TABLENAME = "COORDINATES";

    /**
     * Properties of entity Coordinates.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TargetId = new Property(1, Long.class, "targetId", false, "TARGET_ID");
        public final static Property Latitude = new Property(2, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, double.class, "longitude", false, "LONGITUDE");
        public final static Property AddressLine1 = new Property(4, String.class, "addressLine1", false, "ADDRESS_LINE1");
        public final static Property AddressLine2 = new Property(5, String.class, "addressLine2", false, "ADDRESS_LINE2");
        public final static Property AddressLine3 = new Property(6, String.class, "addressLine3", false, "ADDRESS_LINE3");
    };


    public CoordinatesDao(DaoConfig config) {
        super(config);
    }
    
    public CoordinatesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COORDINATES' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TARGET_ID' INTEGER," + // 1: targetId
                "'LATITUDE' REAL NOT NULL ," + // 2: latitude
                "'LONGITUDE' REAL NOT NULL ," + // 3: longitude
                "'ADDRESS_LINE1' TEXT," + // 4: addressLine1
                "'ADDRESS_LINE2' TEXT," + // 5: addressLine2
                "'ADDRESS_LINE3' TEXT);"); // 6: addressLine3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COORDINATES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Coordinates entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(2, targetId);
        }
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindDouble(4, entity.getLongitude());
 
        String addressLine1 = entity.getAddressLine1();
        if (addressLine1 != null) {
            stmt.bindString(5, addressLine1);
        }
 
        String addressLine2 = entity.getAddressLine2();
        if (addressLine2 != null) {
            stmt.bindString(6, addressLine2);
        }
 
        String addressLine3 = entity.getAddressLine3();
        if (addressLine3 != null) {
            stmt.bindString(7, addressLine3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Coordinates readEntity(Cursor cursor, int offset) {
        Coordinates entity = new Coordinates( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // targetId
            cursor.getDouble(offset + 2), // latitude
            cursor.getDouble(offset + 3), // longitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addressLine1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // addressLine2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // addressLine3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Coordinates entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTargetId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLatitude(cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.getDouble(offset + 3));
        entity.setAddressLine1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddressLine2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddressLine3(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Coordinates entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Coordinates entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
