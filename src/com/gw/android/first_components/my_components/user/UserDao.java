package com.gw.android.first_components.my_components.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.gw.android.first_components.database.DaoSession;

import com.gw.android.first_components.my_components.user.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TargetId = new Property(1, Long.class, "targetId", false, "TARGET_ID");
        public final static Property ServerId = new Property(2, Long.class, "serverId", false, "SERVER_ID");
        public final static Property Usuario = new Property(3, String.class, "usuario", false, "USUARIO");
        public final static Property Sobrenome = new Property(4, String.class, "sobrenome", false, "SOBRENOME");
        public final static Property Escolaridade = new Property(5, String.class, "escolaridade", false, "ESCOLARIDADE");
        public final static Property Curso = new Property(6, String.class, "curso", false, "CURSO");
        public final static Property Instituicao = new Property(7, String.class, "instituicao", false, "INSTITUICAO");
        public final static Property Ocupacao = new Property(8, String.class, "ocupacao", false, "OCUPACAO");
        public final static Property Email = new Property(9, String.class, "email", false, "EMAIL");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TARGET_ID' INTEGER," + // 1: targetId
                "'SERVER_ID' INTEGER," + // 2: serverId
                "'USUARIO' TEXT," + // 3: usuario
                "'SOBRENOME' TEXT," + // 4: sobrenome
                "'ESCOLARIDADE' TEXT," + // 5: escolaridade
                "'CURSO' TEXT," + // 6: curso
                "'INSTITUICAO' TEXT," + // 7: instituicao
                "'OCUPACAO' TEXT," + // 8: ocupacao
                "'EMAIL' TEXT);"); // 9: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(2, targetId);
        }
 
        Long serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindLong(3, serverId);
        }
 
        String usuario = entity.getUsuario();
        if (usuario != null) {
            stmt.bindString(4, usuario);
        }
 
        String sobrenome = entity.getSobrenome();
        if (sobrenome != null) {
            stmt.bindString(5, sobrenome);
        }
 
        String escolaridade = entity.getEscolaridade();
        if (escolaridade != null) {
            stmt.bindString(6, escolaridade);
        }
 
        String curso = entity.getCurso();
        if (curso != null) {
            stmt.bindString(7, curso);
        }
 
        String instituicao = entity.getInstituicao();
        if (instituicao != null) {
            stmt.bindString(8, instituicao);
        }
 
        String ocupacao = entity.getOcupacao();
        if (ocupacao != null) {
            stmt.bindString(9, ocupacao);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // targetId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // serverId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // usuario
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sobrenome
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // escolaridade
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // curso
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // instituicao
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ocupacao
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // email
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTargetId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setServerId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUsuario(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSobrenome(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEscolaridade(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCurso(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInstituicao(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOcupacao(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
